@page "/login"
@using Library.Shared
@using Library.Client.Services
@using Blazored.LocalStorage
@using Library.Client.Generated
@inject IJSRuntime JsRuntime
@inject ILoginService LoginService
@inject ITokenStore TokenStore
@inject ILocalStorageService LocalStorage
@inject ILibraryClient LibraryClient
@inject NavigationManager NavManager
<EditForm style="width: 50%;" Model="@Credentials" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
    <label for="username">Username</label>
    <InputText class="form-control" id="username" @bind-Value="Credentials.Username" />
    </div>
    <div class="form-group">
    <label for="password">Password</label>
    <InputText class="form-control" id="password" type="password" @bind-Value="Credentials.Password" />
    </div>
    <button class="btn btn-success"type="submit">Login</button>
</EditForm>



@code{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    public Login Credentials { get; set; } = new Login();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
            NavManager.NavigateTo("/");
    }
    private async Task HandleValidSubmit()
    {
        await LoginService.Login(Credentials.Username, Credentials.Password);
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
            await JsRuntime.InvokeAsync<object>("alert", user.Identity.Name);
        else
            NavManager.NavigateTo("/");
    }

}