@page "/books"
@using Library.Client.Services
@using Blazored.LocalStorage
@using Library.Client.Generated
@using Library.Client.Components
@using Microsoft.AspNetCore.Authorization
@inject ILibraryClient LibraryClient
@inject ITokenStore TokenStore
@inject ILocalStorageService LocalStorage
@attribute [Authorize]

<h1>Book</h1> 
@if (Documents == null)
{
    <p><em>Loading...</em></p>
}    
else
{
    <div style="display:flex;">
        <input style="width:200px;" class="form-control my-1" id="search" @bind-Value="Search" @bind-Value:event= "oninput" @onkeyup="@HandleKeyup" >
    </div>
    <AllDocumentsTable Documents="@Documents"/>
    <PaginationControls NextPageHandler = "@NextPage" PrevPageHandler = "@PrevPage" CurrentPage="@Page" TotalCount="@Documents.TotalCount"/>
}
    
@code {
    private string Search { get; set; } = "";
    private string CurrentCursor { get; set; } = "";
    private int Page { get; set; } = 1;
    private Stack<string> CursorStack { get; set; } = new Stack<string>();
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private IDocUnionBookConnection Documents { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
            await GetBooks();
    }
    private async Task GetBooks()
    {
        var response = await LibraryClient.GetDocsAsync(Search, CurrentCursor);
        if (response.HasErrors)
            Console.WriteLine(response.Errors.First().Message);
        else if (response.Data != null) Documents = response.Data.Doc;
    }

    private void ResetCursor()
    {
        CursorStack = new Stack<string>();
        CurrentCursor = "";
        Page = 1;
    }
    private async Task HandleKeyup(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || Search == "")
        {
            ResetCursor();
            await GetBooks();
        }
    }
    private async Task PrevPage()
    {
        if (Page > 1)
        {
            Page--;
            CurrentCursor = CursorStack.Pop();
            await GetBooks();
        }
    }
    private async Task NextPage()
    {
        if (Documents.PageInfo.HasNextPage)
        {
            CursorStack.Push(CurrentCursor);
            Page++;
            CurrentCursor = Documents.PageInfo.EndCursor;
            await GetBooks();
        }
    }
}
