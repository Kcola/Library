@page "/fetchdata"
@using Library.Client.Services
@using Blazored.LocalStorage
@using Library.Client.Generated
@using Library.Shared
@using Microsoft.AspNetCore.Authorization
@inject ILibraryClient LibraryClient
@inject ITokenStore TokenStore
@inject ILocalStorageService LocalStorage
@attribute [Authorize]

<h1>Book</h1> 
@if (Documents == null)
{
    <p><em>Loading...</em></p>
}    
else
{
    <p>@Search</p>
    <input style="width:200px;" class="form-control" id="search" @bind-Value="Search" @bind-Value:event= "oninput">
    <button class="btn btn-success" onclick="HandleSearch">Search</button>
    <label for="page">Page</label>
    <input style="width:50px;" class="form-control" id="page" value="@After"/>

    <table class="table">
        <thead>
            <tr>
                <th>Doc Id</th>
                <th>Title</th>
                <th>Publisher Name</th>
                <th>Publishing Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Documents.Edges)
            {
                <tr>
                    <td>@book.Node.Docid</td>
                    <td>@book.Node.Title</td>
                    <td>@book.Node.Publisher.Pubname</td>
                    <td>@book.Node.Pdate.Date</td>
                </tr>
            }
        </tbody>
    </table>
}
    
@code {
    private string Search { get; set; } = "";
    private string After { get; set; } = "";
    private string Before { get; set; } = "";
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private IDocsConnection Documents { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
            await GetBooks();
    }
    private async Task GetBooks()
    {
        var response = await LibraryClient.GetDocsAsync(Search, After, Before);
        if (response.HasErrors)
            Console.WriteLine(response.Errors.First().Message);
        else if (response.Data != null) Documents = response.Data.Doc;
    }

    private async Task HandleSearch(MouseEventArgs e)
    {
        await GetBooks();
    }
}
