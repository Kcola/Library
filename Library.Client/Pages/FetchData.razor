@page "/fetchdata"
@using Library.Client.Schema.Generated
@using Library.Client.Services
@using Blazored.LocalStorage
@using Library.Shared
@inject ILibraryClient LibraryClient
@inject IAuth Auth;
@inject ITokenStore TokenStore
@inject ILocalStorageService LocalStorage

<h1>Books</h1> 
<button @onclick="@ClearLocalStorage">Clear Local</button>
@if(authorized == 0){
<EditForm Model = "@Credentials" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
        <ValidationSummary />
    
        <InputText id="username" @bind-Value="Credentials.Username" />
        <InputText id="password" type="password" @bind-Value="Credentials.Password" />
    
        <button type="submit">Submit</button>
</EditForm>
}
else if(authorized == 1)
{
    
@if (_books == null)
{
    <p><em>Loading...</em></p>
}    
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Doc Id</th>
                <th>Title</th>
                <th>Genre</th>
                <th>ISBN</th>
                <th>Publishing Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in _books)
            {
                <tr>
                    <td>@book.Docid</td>
                    <td>@book.Doc.Title</td>
                    <td>@book.Genre</td>
                    <td>@book.Isbn</td>
                    <td>@book.Doc.Pdate.Date</td>
                </tr>
            }
        </tbody>
    </table>
}
    
}else{
    <p>Loading</p>
}

@code {
    public Login Credentials { get; set; } = new Login();
    private IReadOnlyList<IBook> _books;
    private int authorized { get; set; } = -1;
    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorage.ContainKeyAsync("jwt"))
            authorized = 1;
        else
            authorized = 0;
        if (authorized == 1)
        {
            var token = await LocalStorage.GetItemAsync<string>("jwt");
            TokenStore.SetToken(token);
            var response = await LibraryClient.GetBooksAsync(1980);
            if (response.HasErrors)
                Console.WriteLine(response.Errors.First().Message);
            else if (response.Data != null) _books = response.Data.Book.Nodes;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        await Auth.Login(Credentials.Username, Credentials.Password);
        if (TokenStore.GetToken() != "")
        {
            authorized = 1;
            await LocalStorage.SetItemAsync("jwt", TokenStore.GetToken());
            var response = await LibraryClient.GetBooksAsync(1980);
            if (response.HasErrors)
                Console.WriteLine(response.Errors.First().Message);
            else if (response.Data != null) _books = response.Data.Book.Nodes;
            StateHasChanged();
            Console.WriteLine("StateChanged");
        }
        else
            authorized = 0;
    }

    private async Task ClearLocalStorage()
    {
        await LocalStorage.ClearAsync();
        authorized = 0;
        StateHasChanged();
        Console.WriteLine("StateChanged");
    }
}
