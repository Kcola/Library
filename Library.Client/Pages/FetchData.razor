@page "/fetchdata"
@using Library.Client.Schema.Generated
@inject HttpClient Http
@inject ILibraryClient LibraryClient

<h1>Books</h1>

@if (books == null)
{
    <p><em>Loading...</em></p>
}    
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Doc Id</th>
                <th>Title</th>
                <th>Genre</th>
                <th>ISBN</th>
                <th>Publishing Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Docid</td>
                    <td>@book.Doc.Title</td>
                    <td>@book.Genre</td>
                    <td>@book.Isbn</td>
                    <td>@book.Doc.Pdate.Date</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    private IReadOnlyList<IBook> books;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        var response = await LibraryClient.GetBooksAsync(1990);
        books = response.Data.Book.Nodes;
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
