@page "/fetchdata"
@using Library.Client.Schema.Generated
@using Library.Client.Components
@using Library.Client.Services
@using Blazored.LocalStorage
@using Library.Shared
@inject ILibraryClient LibraryClient
@inject IAuth Auth;
@inject ITokenStore TokenStore
@inject ILocalStorageService LocalStorage

<h1>Book</h1> 
<button @onclick="@ClearLocalStorage">Log Out</button>
@if(!Auth.LoggedIn){
    <LoginForm Authenticated="@Rerender"></LoginForm>
}
else
{
    
@if (_books == null)
{
    <p><em>Loading...</em></p>
}    
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Doc Id</th>
                <th>Title</th>
                <th>Genre</th>
                <th>ISBN</th>
                <th>Publishing Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in _books)
            {
                <tr>
                    <td>@book.Docid</td>
                    <td>@book.Doc.Title</td>
                    <td>@book.Genre</td>
                    <td>@book.Isbn</td>
                    <td>@book.Doc.Pdate.Date</td>
                </tr>
            }
        </tbody>
    </table>
}
    
}

@code {
    public Login Credentials { get; set; } = new Login();
    public IReadOnlyList<IBook> _books { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Auth.LoggedIn = await LocalStorage.ContainKeyAsync("jwt");
        await GetBooks();
    }
    private async Task GetBooks()
    {
        if (Auth.LoggedIn)
        {
            var token = await LocalStorage.GetItemAsync<string>("jwt");
            TokenStore.SetToken(token);
            var response = await LibraryClient.GetBooksAsync(1980);
            if (response.HasErrors)
                Console.WriteLine(response.Errors.First().Message);
            else if (response.Data != null) _books = response.Data.Book.Nodes;
            StateHasChanged();
        }
    }

    private async Task ClearLocalStorage()
    {
        await LocalStorage.ClearAsync();
        Auth.LoggedIn = false;
        StateHasChanged();
    }

    private async Task Rerender()
    {
        if (Auth.LoggedIn)
        {
            await GetBooks();
            StateHasChanged();
        }
    }
}
